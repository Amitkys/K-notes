<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Editable Title and Content</title>
    <style>
        .editable-input, .editable-textarea {
            width: 100%;
            padding: 5px;
            margin-bottom: 10px;
            border: 1px solid #ccc;
            box-sizing: border-box;
            cursor: text;
        }
        .editable-input[readonly], .editable-textarea[readonly] {
            border: 1px solid #ddd;
            background-color: #f5f5f5;
        }
        .save-btn {
            display: none;
            margin-top: 10px;
        }
        .loading {
            display: none;
        }
        .loading.visible {
            display: inline-block;
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body>
    
    <!-- Title Bar (Initially Read-Only) -->
    <div>
        <label for="titleField">Title:</label>
        <input type="text" id="titleField" class="editable-input" value="<%=allData[0].title%>" readonly>
    </div>

    <!-- Large Text Area (Initially Read-Only) -->
    <div>
        <label for="contentField">Content:</label>
        <textarea id="contentField" class="editable-textarea" readonly><%=allData[0].text%></textarea>
    </div>

    <!-- Save Button (Only visible after editing) -->
    <button type="button" id="saveBtn" class="save-btn">Update</button>

    <!-- Loading Indicator -->
    <div id="loading" class="loading">updating...</div>

    <script>
        const titleField = document.getElementById('titleField');
        const contentField = document.getElementById('contentField');
        const saveBtn = document.getElementById('saveBtn');
        const loadingIndicator = document.getElementById('loading');

        // Enable editing for title on double-click
        titleField.addEventListener('dblclick', () => {
            titleField.readOnly = false;
            titleField.style.border = '1px solid #007bff'; // Highlight border
            titleField.style.backgroundColor = '#ffffff'; // White background for editable state
            titleField.focus();
            saveBtn.style.display = 'inline-block'; // Show save button
        });

        // Enable editing for content on double-click
        contentField.addEventListener('dblclick', () => {
            contentField.readOnly = false;
            contentField.style.border = '1px solid #007bff'; // Highlight border
            contentField.style.backgroundColor = '#ffffff'; // White background for editable state
            contentField.focus();
            saveBtn.style.display = 'inline-block'; // Show save button
        });

        // Save the changes
        saveBtn.addEventListener('click', () => {
            const title = titleField.value;
            const text = contentField.value;

            loadingIndicator.classList.add('visible'); // Show loading indicator

            axios.put('/update-notes', { title, text })
                .then(response => {
                    // alert('hi')
                    console.log('Note updated:', response.data);
                    // Reset to read-only state
                    titleField.readOnly = true;
                    titleField.style.border = '1px solid #ddd'; // Reset border
                    titleField.style.backgroundColor = '#f5f5f5'; // Reset background
                    
                    contentField.readOnly = true;
                    contentField.style.border = '1px solid #ddd'; // Reset border
                    contentField.style.backgroundColor = '#f5f5f5'; // Reset background
                    
                    saveBtn.style.display = 'none'; // Hide save button after saving
                })
                .catch(error => {
                    console.error('Error updating note:', error);
                    // Optionally show an error message to the user
                })
                .finally(() => {
                    loadingIndicator.classList.remove('visible'); // Hide loading indicator
                });
        });
    </script>
</body>
</html>
